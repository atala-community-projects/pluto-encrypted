{"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/database/src/index.ts":{"path":"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/database/src/index.ts","statementMap":{"0":{"start":{"line":3,"column":24},"end":{"line":72,"column":1}},"1":{"start":{"line":5,"column":4},"end":{"line":70,"column":5}},"2":{"start":{"line":13,"column":10},"end":{"line":13,"column":17}},"3":{"start":{"line":14,"column":6},"end":{"line":16,"column":7}},"4":{"start":{"line":15,"column":8},"end":{"line":15,"column":59}},"5":{"start":{"line":17,"column":44},"end":{"line":17,"column":53}},"6":{"start":{"line":18,"column":6},"end":{"line":21,"column":9}},"7":{"start":{"line":19,"column":34},"end":{"line":19,"column":61}},"8":{"start":{"line":20,"column":8},"end":{"line":20,"column":61}},"9":{"start":{"line":22,"column":23},"end":{"line":27,"column":8}},"10":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"11":{"start":{"line":29,"column":8},"end":{"line":29,"column":42}},"12":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"13":{"start":{"line":32,"column":8},"end":{"line":32,"column":49}},"14":{"start":{"line":34,"column":33},"end":{"line":34,"column":56}},"15":{"start":{"line":35,"column":29},"end":{"line":35,"column":60}},"16":{"start":{"line":36,"column":33},"end":{"line":46,"column":35}},"17":{"start":{"line":37,"column":34},"end":{"line":37,"column":72}},"18":{"start":{"line":38,"column":8},"end":{"line":44,"column":11}},"19":{"start":{"line":39,"column":23},"end":{"line":39,"column":60}},"20":{"start":{"line":40,"column":10},"end":{"line":42,"column":11}},"21":{"start":{"line":41,"column":12},"end":{"line":41,"column":149}},"22":{"start":{"line":43,"column":10},"end":{"line":43,"column":40}},"23":{"start":{"line":45,"column":8},"end":{"line":45,"column":23}},"24":{"start":{"line":47,"column":20},"end":{"line":62,"column":8}},"25":{"start":{"line":49,"column":23},"end":{"line":49,"column":38}},"26":{"start":{"line":50,"column":30},"end":{"line":50,"column":42}},"27":{"start":{"line":51,"column":10},"end":{"line":60,"column":11}},"28":{"start":{"line":52,"column":12},"end":{"line":54,"column":14}},"29":{"start":{"line":53,"column":14},"end":{"line":53,"column":53}},"30":{"start":{"line":56,"column":12},"end":{"line":58,"column":13}},"31":{"start":{"line":57,"column":14},"end":{"line":57,"column":61}},"32":{"start":{"line":59,"column":12},"end":{"line":59,"column":31}},"33":{"start":{"line":63,"column":6},"end":{"line":63,"column":19}},"34":{"start":{"line":65,"column":6},"end":{"line":69,"column":7}},"35":{"start":{"line":66,"column":8},"end":{"line":66,"column":50}},"36":{"start":{"line":68,"column":8},"end":{"line":68,"column":18}}},"fnMap":{"0":{"name":"createEncrypted","decl":{"start":{"line":4,"column":34},"end":{"line":4,"column":49}},"loc":{"start":{"line":4,"column":59},"end":{"line":71,"column":3}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":39},"end":{"line":18,"column":40}},"loc":{"start":{"line":18,"column":59},"end":{"line":21,"column":7}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":55},"end":{"line":36,"column":56}},"loc":{"start":{"line":36,"column":84},"end":{"line":46,"column":7}},"line":36},"3":{"name":"(anonymous_3)","decl":{"start":{"line":38,"column":55},"end":{"line":38,"column":56}},"loc":{"start":{"line":38,"column":71},"end":{"line":44,"column":9}},"line":38},"4":{"name":"(anonymous_4)","decl":{"start":{"line":48,"column":8},"end":{"line":48,"column":9}},"loc":{"start":{"line":48,"column":29},"end":{"line":61,"column":9}},"line":48},"5":{"name":"(anonymous_5)","decl":{"start":{"line":52,"column":19},"end":{"line":52,"column":20}},"loc":{"start":{"line":52,"column":37},"end":{"line":54,"column":13}},"line":52}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":8},"end":{"line":12,"column":24}},"type":"default-arg","locations":[{"start":{"line":12,"column":20},"end":{"line":12,"column":24}}],"line":12},"1":{"loc":{"start":{"line":14,"column":6},"end":{"line":16,"column":7}},"type":"if","locations":[{"start":{"line":14,"column":6},"end":{"line":16,"column":7}},{"start":{},"end":{}}],"line":14},"2":{"loc":{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},"type":"if","locations":[{"start":{"line":28,"column":6},"end":{"line":30,"column":7}},{"start":{},"end":{}}],"line":28},"3":{"loc":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},{"start":{},"end":{}}],"line":31},"4":{"loc":{"start":{"line":40,"column":10},"end":{"line":42,"column":11}},"type":"if","locations":[{"start":{"line":40,"column":10},"end":{"line":42,"column":11}},{"start":{},"end":{}}],"line":40},"5":{"loc":{"start":{"line":51,"column":10},"end":{"line":60,"column":11}},"type":"if","locations":[{"start":{"line":51,"column":10},"end":{"line":60,"column":11}},{"start":{"line":55,"column":17},"end":{"line":60,"column":11}}],"line":51},"6":{"loc":{"start":{"line":56,"column":12},"end":{"line":58,"column":13}},"type":"if","locations":[{"start":{"line":56,"column":12},"end":{"line":58,"column":13}},{"start":{},"end":{}}],"line":56},"7":{"loc":{"start":{"line":65,"column":6},"end":{"line":69,"column":7}},"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":69,"column":7}},{"start":{"line":67,"column":13},"end":{"line":69,"column":7}}],"line":65}},"s":{"0":1,"1":192,"2":192,"3":192,"4":3,"5":189,"6":189,"7":1440,"8":1440,"9":189,"10":189,"11":186,"12":188,"13":3,"14":188,"15":185,"16":185,"17":1408,"18":1408,"19":5915,"20":5915,"21":3,"22":5912,"23":1405,"24":182,"25":1064,"26":1064,"27":1064,"28":103,"29":103,"30":961,"31":313,"32":648,"33":182,"34":10,"35":1,"36":9},"f":{"0":192,"1":1440,"2":1408,"3":5915,"4":1064,"5":103},"b":{"0":[186],"1":[3,189],"2":[186,3],"3":[3,185],"4":[3,5912],"5":[103,961],"6":[313,648],"7":[1,9]},"inputSourceMap":{"version":3,"sources":["/home/runner/work/pluto-encrypted/pluto-encrypted/packages/database/src/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module database\n */\nimport { DatabaseBase, ExtractStaticMethods, UnionToIntersection } from '@pluto-encrypted/shared'\nimport {\n  CollectionsOfDatabase,\n  RxCollection,\n  RxCollectionCreator,\n  RxDumpDatabase,\n  RxError,\n  RxStorage\n} from 'rxdb'\n\nexport type * from './types';\n\n/**\n * Pluto is a storage interface describing storage requirements of the edge agents\n * which will be implemented using this SDK. Implement this interface using your\n * preferred underlying storage technology, most appropriate for your use case.\n */\nexport const Database = {\n  createEncrypted: async function createEncrypted<\n    Collections extends CollectionsOfDatabase,\n  >(options: {\n    name: string;\n    encryptionKey: Uint8Array;\n    importData?: RxDumpDatabase<Collections>;\n    storage: RxStorage<any, any>;\n    autoStart?: boolean;\n    collections: {\n      [key in keyof Collections]: RxCollectionCreator<any>;\n    };\n  }) {\n    try {\n      const {\n        collections,\n        name,\n        storage,\n        encryptionKey,\n        importData,\n        autoStart = true,\n      } = options;\n\n\n      if (!storage) {\n        throw new Error('Please provide a valid storage.')\n      }\n\n      const collectionMap = new Map<any, RxCollectionCreator<any>>();\n\n      Object.keys(collections).forEach((collectionName) => {\n        const currentCollection = collections[collectionName]!;\n        collectionMap.set(collectionName, currentCollection)\n      })\n\n      const instance = new DatabaseBase<Collections>({\n        ignoreDuplicate: true,\n        name,\n        storage,\n        password: Buffer.from(encryptionKey).toString('hex')\n      })\n\n      if (autoStart) {\n        await instance.start(collections)\n      }\n\n      if (importData) {\n        await instance.db.importJSON(importData)\n      }\n\n      const currentCollections = instance.db.collections;\n      const collectionKeys = Object.keys(currentCollections)\n      const staticMethodModels = collectionKeys.reduce<Map<string, Function>>((statics, collectionName) => {\n        const currentCollection: RxCollection = instance.getCollection(collectionName);\n        Object.keys(currentCollection.statics).forEach((staticName) => {\n          const func = currentCollection.statics[staticName]!;\n          if (statics.has(staticName)) {\n            throw new Error(`Static function in model ${collectionName}.${staticName} is duplicated, statics must be unique across al collections.`)\n          }\n          statics.set(staticName, func)\n        })\n        return statics\n      }, new Map<string, Function>());\n\n\n      const proxy = new Proxy<DatabaseBase<Collections> & UnionToIntersection<ExtractStaticMethods<\n        Collections[keyof Collections]\n      >>>(instance as any, {\n        get(target, propAny) {\n          const prop = String(propAny)\n          const destination = target[prop]\n          if (typeof destination === 'function') {\n            // If the property is a function, return a function that calls it\n            return function (...args) {\n              return destination.apply(target, args);\n            };\n          } else {\n            if (staticMethodModels.has(prop.toString())) {\n              return staticMethodModels.get(prop.toString())\n            }\n            return destination;\n          }\n        },\n      })\n\n      return proxy\n    } catch (err) {\n      /* istanbul ignore else */\n      if ((err as RxError).code === 'DB1') {\n        throw new Error('Invalid Authentication')\n      } else {\n        /* istanbul ignore next */\n\n        throw err\n      }\n    }\n  }\n}"],"mappings":";AAIA,SAAS,oBAA+D;AAiBjE,aAAM,WAAW;AAAA,EACtB,iBAAiB,eAAe,gBAE9B,SASC;AACD,QAAI;AACF,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,YAAY;AAAA,MACd,IAAI;AAGJ,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,iCAAiC;AAAA,MACnD;AAEA,YAAM,gBAAgB,oBAAI,IAAmC;AAE7D,aAAO,KAAK,WAAW,EAAE,QAAQ,CAAC,mBAAmB;AACnD,cAAM,oBAAoB,YAAY,cAAc;AACpD,sBAAc,IAAI,gBAAgB,iBAAiB;AAAA,MACrD,CAAC;AAED,YAAM,WAAW,IAAI,aAA0B;AAAA,QAC7C,iBAAiB;AAAA,QACjB;AAAA,QACA;AAAA,QACA,UAAU,OAAO,KAAK,aAAa,EAAE,SAAS,KAAK;AAAA,MACrD,CAAC;AAED,UAAI,WAAW;AACb,cAAM,SAAS,MAAM,WAAW;AAAA,MAClC;AAEA,UAAI,YAAY;AACd,cAAM,SAAS,GAAG,WAAW,UAAU;AAAA,MACzC;AAEA,YAAM,qBAAqB,SAAS,GAAG;AACvC,YAAM,iBAAiB,OAAO,KAAK,kBAAkB;AACrD,YAAM,qBAAqB,eAAe,OAA8B,CAAC,SAAS,mBAAmB;AACnG,cAAM,oBAAkC,SAAS,cAAc,cAAc;AAC7E,eAAO,KAAK,kBAAkB,OAAO,EAAE,QAAQ,CAAC,eAAe;AAC7D,gBAAM,OAAO,kBAAkB,QAAQ,UAAU;AACjD,cAAI,QAAQ,IAAI,UAAU,GAAG;AAC3B,kBAAM,IAAI,MAAM,4BAA4B,cAAc,IAAI,UAAU,+DAA+D;AAAA,UACzI;AACA,kBAAQ,IAAI,YAAY,IAAI;AAAA,QAC9B,CAAC;AACD,eAAO;AAAA,MACT,GAAG,oBAAI,IAAsB,CAAC;AAG9B,YAAM,QAAQ,IAAI,MAEd,UAAiB;AAAA,QACnB,IAAI,QAAQ,SAAS;AACnB,gBAAM,OAAO,OAAO,OAAO;AAC3B,gBAAM,cAAc,OAAO,IAAI;AAC/B,cAAI,OAAO,gBAAgB,YAAY;AAErC,mBAAO,YAAa,MAAM;AACxB,qBAAO,YAAY,MAAM,QAAQ,IAAI;AAAA,YACvC;AAAA,UACF,OAAO;AACL,gBAAI,mBAAmB,IAAI,KAAK,SAAS,CAAC,GAAG;AAC3C,qBAAO,mBAAmB,IAAI,KAAK,SAAS,CAAC;AAAA,YAC/C;AACA,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT,SAAS,KAAK;AAEZ,UAAK,IAAgB,SAAS,OAAO;AACnC,cAAM,IAAI,MAAM,wBAAwB;AAAA,MAC1C,OAAO;AAGL,cAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9522a7dd0d00b659489760dfc28847c55e044e0f"}}