{"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/api.ts":{"path":"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/api.ts","statementMap":{"0":{"start":{"line":5,"column":4},"end":{"line":5,"column":33}},"1":{"start":{"line":6,"column":4},"end":{"line":6,"column":43}},"2":{"start":{"line":9,"column":4},"end":{"line":9,"column":60}},"3":{"start":{"line":12,"column":4},"end":{"line":22,"column":5}},"4":{"start":{"line":13,"column":24},"end":{"line":13,"column":34}},"5":{"start":{"line":14,"column":23},"end":{"line":14,"column":51}},"6":{"start":{"line":15,"column":22},"end":{"line":15,"column":32}},"7":{"start":{"line":16,"column":34},"end":{"line":16,"column":53}},"8":{"start":{"line":17,"column":6},"end":{"line":17,"column":98}},"9":{"start":{"line":18,"column":6},"end":{"line":18,"column":39}},"10":{"start":{"line":20,"column":6},"end":{"line":20,"column":83}},"11":{"start":{"line":21,"column":6},"end":{"line":21,"column":33}},"12":{"start":{"line":25,"column":20},"end":{"line":25,"column":66}},"13":{"start":{"line":26,"column":16},"end":{"line":26,"column":28}},"14":{"start":{"line":27,"column":20},"end":{"line":33,"column":5}},"15":{"start":{"line":34,"column":17},"end":{"line":34,"column":47}},"16":{"start":{"line":35,"column":4},"end":{"line":35,"column":16}},"17":{"start":{"line":38,"column":20},"end":{"line":38,"column":98}},"18":{"start":{"line":39,"column":16},"end":{"line":39,"column":104}},"19":{"start":{"line":40,"column":20},"end":{"line":46,"column":5}},"20":{"start":{"line":47,"column":21},"end":{"line":47,"column":51}},"21":{"start":{"line":48,"column":25},"end":{"line":48,"column":38}},"22":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},"23":{"start":{"line":50,"column":6},"end":{"line":50,"column":44}},"24":{"start":{"line":52,"column":24},"end":{"line":52,"column":111}},"25":{"start":{"line":53,"column":4},"end":{"line":53,"column":23}},"26":{"start":{"line":56,"column":20},"end":{"line":56,"column":74}},"27":{"start":{"line":57,"column":25},"end":{"line":67,"column":5}},"28":{"start":{"line":68,"column":21},"end":{"line":68,"column":58}},"29":{"start":{"line":69,"column":4},"end":{"line":69,"column":106}},"30":{"start":{"line":72,"column":20},"end":{"line":72,"column":98}},"31":{"start":{"line":73,"column":16},"end":{"line":73,"column":104}},"32":{"start":{"line":74,"column":20},"end":{"line":80,"column":5}},"33":{"start":{"line":81,"column":21},"end":{"line":81,"column":51}},"34":{"start":{"line":82,"column":25},"end":{"line":82,"column":38}},"35":{"start":{"line":83,"column":4},"end":{"line":85,"column":5}},"36":{"start":{"line":84,"column":6},"end":{"line":84,"column":44}},"37":{"start":{"line":86,"column":18},"end":{"line":86,"column":93}},"38":{"start":{"line":87,"column":4},"end":{"line":87,"column":17}},"39":{"start":{"line":90,"column":43},"end":{"line":90,"column":55}},"40":{"start":{"line":91,"column":17},"end":{"line":95,"column":5}},"41":{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},"42":{"start":{"line":97,"column":6},"end":{"line":97,"column":51}},"43":{"start":{"line":99,"column":20},"end":{"line":99,"column":61}},"44":{"start":{"line":100,"column":20},"end":{"line":108,"column":5}},"45":{"start":{"line":109,"column":21},"end":{"line":109,"column":51}},"46":{"start":{"line":110,"column":25},"end":{"line":110,"column":38}},"47":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"48":{"start":{"line":112,"column":6},"end":{"line":112,"column":44}},"49":{"start":{"line":114,"column":22},"end":{"line":114,"column":39}},"50":{"start":{"line":115,"column":4},"end":{"line":115,"column":21}},"51":{"start":{"line":118,"column":20},"end":{"line":118,"column":76}},"52":{"start":{"line":119,"column":18},"end":{"line":125,"column":5}},"53":{"start":{"line":126,"column":21},"end":{"line":126,"column":51}},"54":{"start":{"line":127,"column":4},"end":{"line":127,"column":25}},"55":{"start":{"line":130,"column":21},"end":{"line":130,"column":35}},"56":{"start":{"line":131,"column":4},"end":{"line":136,"column":5}},"57":{"start":{"line":132,"column":6},"end":{"line":135,"column":7}},"58":{"start":{"line":133,"column":22},"end":{"line":133,"column":30}},"59":{"start":{"line":134,"column":8},"end":{"line":134,"column":36}},"60":{"start":{"line":137,"column":4},"end":{"line":137,"column":20}},"61":{"start":{"line":140,"column":20},"end":{"line":140,"column":21}},"62":{"start":{"line":141,"column":4},"end":{"line":147,"column":5}},"63":{"start":{"line":142,"column":6},"end":{"line":146,"column":7}},"64":{"start":{"line":143,"column":8},"end":{"line":143,"column":32}},"65":{"start":{"line":145,"column":8},"end":{"line":145,"column":71}},"66":{"start":{"line":148,"column":4},"end":{"line":148,"column":28}},"67":{"start":{"line":151,"column":20},"end":{"line":151,"column":58}},"68":{"start":{"line":152,"column":17},"end":{"line":156,"column":6}},"69":{"start":{"line":157,"column":4},"end":{"line":157,"column":77}},"70":{"start":{"line":158,"column":18},"end":{"line":165,"column":5}},"71":{"start":{"line":166,"column":4},"end":{"line":166,"column":75}},"72":{"start":{"line":167,"column":21},"end":{"line":167,"column":51}},"73":{"start":{"line":168,"column":25},"end":{"line":168,"column":38}},"74":{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},"75":{"start":{"line":170,"column":6},"end":{"line":170,"column":44}},"76":{"start":{"line":172,"column":4},"end":{"line":172,"column":29}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":2},"end":{"line":4,"column":3}},"loc":{"start":{"line":4,"column":26},"end":{"line":7,"column":3}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":2},"end":{"line":8,"column":3}},"loc":{"start":{"line":8,"column":22},"end":{"line":10,"column":3}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":28},"end":{"line":23,"column":3}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":2},"end":{"line":24,"column":3}},"loc":{"start":{"line":24,"column":27},"end":{"line":36,"column":3}},"line":24},"4":{"name":"(anonymous_4)","decl":{"start":{"line":37,"column":2},"end":{"line":37,"column":3}},"loc":{"start":{"line":37,"column":42},"end":{"line":54,"column":3}},"line":37},"5":{"name":"(anonymous_5)","decl":{"start":{"line":55,"column":2},"end":{"line":55,"column":3}},"loc":{"start":{"line":55,"column":25},"end":{"line":70,"column":3}},"line":55},"6":{"name":"(anonymous_6)","decl":{"start":{"line":71,"column":2},"end":{"line":71,"column":3}},"loc":{"start":{"line":71,"column":36},"end":{"line":88,"column":3}},"line":71},"7":{"name":"(anonymous_7)","decl":{"start":{"line":89,"column":2},"end":{"line":89,"column":3}},"loc":{"start":{"line":89,"column":38},"end":{"line":116,"column":3}},"line":89},"8":{"name":"(anonymous_8)","decl":{"start":{"line":117,"column":2},"end":{"line":117,"column":3}},"loc":{"start":{"line":117,"column":44},"end":{"line":128,"column":3}},"line":117},"9":{"name":"(anonymous_9)","decl":{"start":{"line":129,"column":2},"end":{"line":129,"column":3}},"loc":{"start":{"line":129,"column":24},"end":{"line":138,"column":3}},"line":129},"10":{"name":"(anonymous_10)","decl":{"start":{"line":139,"column":2},"end":{"line":139,"column":3}},"loc":{"start":{"line":139,"column":28},"end":{"line":149,"column":3}},"line":139},"11":{"name":"(anonymous_11)","decl":{"start":{"line":150,"column":2},"end":{"line":150,"column":3}},"loc":{"start":{"line":150,"column":44},"end":{"line":173,"column":3}},"line":150}},"branchMap":{"0":{"loc":{"start":{"line":39,"column":16},"end":{"line":39,"column":104}},"type":"cond-expr","locations":[{"start":{"line":39,"column":36},"end":{"line":39,"column":89}},{"start":{"line":39,"column":92},"end":{"line":39,"column":104}}],"line":39},"1":{"loc":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},"type":"if","locations":[{"start":{"line":49,"column":4},"end":{"line":51,"column":5}},{"start":{},"end":{}}],"line":49},"2":{"loc":{"start":{"line":52,"column":24},"end":{"line":52,"column":111}},"type":"cond-expr","locations":[{"start":{"line":52,"column":77},"end":{"line":52,"column":106}},{"start":{"line":52,"column":109},"end":{"line":52,"column":111}}],"line":52},"3":{"loc":{"start":{"line":52,"column":24},"end":{"line":52,"column":74}},"type":"binary-expr","locations":[{"start":{"line":52,"column":24},"end":{"line":52,"column":41}},{"start":{"line":52,"column":45},"end":{"line":52,"column":74}}],"line":52},"4":{"loc":{"start":{"line":69,"column":23},"end":{"line":69,"column":104}},"type":"cond-expr","locations":[{"start":{"line":69,"column":59},"end":{"line":69,"column":72}},{"start":{"line":69,"column":75},"end":{"line":69,"column":104}}],"line":69},"5":{"loc":{"start":{"line":73,"column":16},"end":{"line":73,"column":104}},"type":"cond-expr","locations":[{"start":{"line":73,"column":36},"end":{"line":73,"column":89}},{"start":{"line":73,"column":92},"end":{"line":73,"column":104}}],"line":73},"6":{"loc":{"start":{"line":83,"column":4},"end":{"line":85,"column":5}},"type":"if","locations":[{"start":{"line":83,"column":4},"end":{"line":85,"column":5}},{"start":{},"end":{}}],"line":83},"7":{"loc":{"start":{"line":86,"column":18},"end":{"line":86,"column":93}},"type":"cond-expr","locations":[{"start":{"line":86,"column":65},"end":{"line":86,"column":88}},{"start":{"line":86,"column":91},"end":{"line":86,"column":93}}],"line":86},"8":{"loc":{"start":{"line":86,"column":18},"end":{"line":86,"column":62}},"type":"binary-expr","locations":[{"start":{"line":86,"column":18},"end":{"line":86,"column":35}},{"start":{"line":86,"column":39},"end":{"line":86,"column":62}}],"line":86},"9":{"loc":{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},"type":"if","locations":[{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},{"start":{},"end":{}}],"line":96},"10":{"loc":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},{"start":{},"end":{}}],"line":111},"11":{"loc":{"start":{"line":132,"column":6},"end":{"line":135,"column":7}},"type":"if","locations":[{"start":{"line":132,"column":6},"end":{"line":135,"column":7}},{"start":{},"end":{}}],"line":132},"12":{"loc":{"start":{"line":142,"column":6},"end":{"line":146,"column":7}},"type":"if","locations":[{"start":{"line":142,"column":6},"end":{"line":146,"column":7}},{"start":{"line":144,"column":13},"end":{"line":146,"column":7}}],"line":142},"13":{"loc":{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":171,"column":5}},{"start":{},"end":{}}],"line":169}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"inputSourceMap":{"version":3,"sources":["/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/api.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\n\n\nimport { IagonFile, IagonFolder, IagonInternalParameters, IagonResponse } from \"./types\";\n\nexport class IagonAPI {\n    private baseUrl = \"https://gw.iagon.com/\";\n    constructor(private parameters: IagonInternalParameters) { }\n\n    get iagonPassword() {\n        return Buffer.from(this.parameters.password).toString()\n    }\n\n    private async runRequest<Response extends IagonResponse<any> | any>(options: AxiosRequestConfig) {\n        try {\n            const startTime = Date.now();\n            const response = await axios.request<Response>(options);\n            const endTime = Date.now();\n            const elapsedMilliseconds = endTime - startTime;\n            console.log(`Request \"${options.method}\":\"${options.url}\" took ${elapsedMilliseconds} ms.`);\n            return Promise.resolve(response)\n        } catch (err) {\n            console.error(`Request \"${options.method}\":\"${options.url}\" failed: ${err}`);\n            return Promise.reject(err)\n        }\n    }\n\n    async removeFile(fileId: string) {\n        const baseUrl = `${this.baseUrl}api/v2/storage/file/${fileId}`;\n        const url = `${baseUrl}`\n        const options = {\n            'method': 'DELETE',\n            'url': url,\n            'headers': {\n                'x-api-key': this.parameters.apiKey\n            }\n        };\n        const file = await this.runRequest(options)\n        return file\n    }\n    async getDirectories(parentDirectoryId?: string) {\n        const baseUrl = `${this.baseUrl}api/v2/storage/directory?visibility=private&listingType=index`\n        const url = parentDirectoryId ? `${baseUrl}&parent_directory_id=${parentDirectoryId}` : `${baseUrl}`\n        const options = {\n            'method': 'GET',\n            'url': url,\n            'headers': {\n                'x-api-key': this.parameters.apiKey\n            }\n        };\n\n        const response = await this.runRequest<IagonResponse<{\n            directories: IagonFolder[],\n            files: IagonFile[]\n        }>>(options)\n\n        const jsonResponse = response.data;\n        if (!jsonResponse.success) {\n            throw new Error(jsonResponse.message)\n        }\n\n        const directories = jsonResponse.data && jsonResponse.data.directories ? jsonResponse.data.directories : [];\n        return directories\n    }\n    async getFile(options: { parentDirectoryId?: string | undefined; file: IagonFile; }) {\n        const baseUrl = `${this.baseUrl}api/v2/storage/parameterized/download`\n        var requestOptions = {\n            'method': 'POST',\n            'url': baseUrl,\n            'headers': {\n                'x-api-key': this.parameters.apiKey\n            },\n            'data': {\n                \"id\": options.file._id,\n                \"password\": this.iagonPassword\n            }\n        };\n        const response = await this.runRequest<Uint8Array>(requestOptions)\n        return Buffer.from(typeof response.data === \"string\" ? response.data : JSON.stringify(response.data));\n    }\n    async getFiles(parentDirectoryId?: string) {\n        const baseUrl = `${this.baseUrl}api/v2/storage/directory?visibility=private&listingType=index`\n        const url = parentDirectoryId ? `${baseUrl}&parent_directory_id=${parentDirectoryId}` : `${baseUrl}`\n        const options = {\n            'method': 'GET',\n            'url': url,\n            'headers': {\n                'x-api-key': this.parameters.apiKey\n            }\n        };\n        const response = await this.runRequest<IagonResponse<{\n            directories: IagonFolder[],\n            files: IagonFile[]\n        }>>(options);\n\n        const jsonResponse: IagonResponse<{\n            directories: IagonFolder[],\n            files: IagonFile[]\n        }> = response.data;\n\n        if (!jsonResponse.success) {\n            throw new Error(jsonResponse.message)\n        }\n        const files = jsonResponse.data && jsonResponse.data.files ? jsonResponse.data.files : [];\n        return files\n    }\n    async createDirectory(queryOptions: { parentDirectoryId?: string, dirName: string }) {\n        const { dirName, parentDirectoryId } = queryOptions\n        const body: any = {\n            \"directory_name\": dirName,\n            \"visibility\": \"private\",\n            \"index_listing\": true\n        }\n\n        if (parentDirectoryId) {\n            body.parent_directory_id = parentDirectoryId;\n        }\n\n        const baseUrl = `${this.baseUrl}api/v2/storage/directory`\n        const options = {\n            'method': 'POST',\n            'url': baseUrl,\n            'headers': {\n                'Content-Type': 'application/json',\n                'x-api-key': this.parameters.apiKey\n            },\n            data: JSON.stringify(body)\n        };\n\n        const response = await this.runRequest<IagonResponse<IagonFolder>>(options)\n        const jsonResponse: IagonResponse<IagonFolder> = response.data;\n        if (!jsonResponse.success) {\n            throw new Error(jsonResponse.message)\n        }\n\n        const directory = jsonResponse.data\n        return directory\n    }\n    async removeDirectory(dirname: IagonFolder, recursive: true) {\n        const baseUrl = `${this.baseUrl}api/v2/storage/directory/${dirname._id}`\n        var options = {\n            'method': 'DELETE',\n            'url': baseUrl,\n            'headers': {\n                'x-api-key': this.parameters.apiKey\n            }\n        };\n        const response = await this.runRequest(options);\n        return response.data\n    }\n    private objectToFormData(obj) {\n        const formData = new FormData();\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                const value = obj[key];\n                formData.append(key, value);\n            }\n        }\n        return formData;\n    }\n    private getFormDataSize(formData) {\n        let totalSize = 0;\n        for (const [key, value] of formData.entries()) {\n            if (value instanceof Blob) {\n                totalSize += value.size;\n            } else {\n                totalSize += new TextEncoder().encode(value.toString()).length;\n            }\n        }\n        return totalSize / 1024;\n    }\n    async uploadFile(dirname: IagonFolder, file: string, contents: Uint8Array) {\n        const baseUrl = `${this.baseUrl}api/v2/storage/upload`;\n        const body = this.objectToFormData({\n            \"visibility\": \"private\",\n            \"password\": this.iagonPassword,\n            'directoryId': dirname._id\n        });\n        body.append(\"file\", new Blob([contents], { type: \"platin/text\" }), file)\n        var options = {\n            'method': 'POST',\n            'url': baseUrl,\n            'headers': {\n                'x-api-key': this.parameters.apiKey\n            },\n            data: body\n        };\n        console.log(`Uploading aproximately ${this.getFormDataSize(body)} kb`)\n        const response = await this.runRequest<IagonResponse<IagonFile>>(options);\n        const jsonResponse: IagonResponse<IagonFile> = response.data;\n        if (!jsonResponse.success) {\n            throw new Error(jsonResponse.message)\n        }\n        return jsonResponse.data\n    }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"08e641d43daae0a113a9957a7468719dea845441"},"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/instance.ts":{"path":"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/instance.ts","statementMap":{"0":{"start":{"line":9,"column":4},"end":{"line":9,"column":37}},"1":{"start":{"line":10,"column":4},"end":{"line":10,"column":31}},"2":{"start":{"line":11,"column":4},"end":{"line":11,"column":27}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":25}},"4":{"start":{"line":13,"column":4},"end":{"line":13,"column":41}},"5":{"start":{"line":14,"column":4},"end":{"line":14,"column":29}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":31}},"7":{"start":{"line":16,"column":4},"end":{"line":16,"column":49}},"8":{"start":{"line":17,"column":4},"end":{"line":17,"column":34}},"9":{"start":{"line":18,"column":4},"end":{"line":18,"column":75}},"10":{"start":{"line":21,"column":21},"end":{"line":21,"column":87}},"11":{"start":{"line":22,"column":26},"end":{"line":22,"column":76}},"12":{"start":{"line":22,"column":52},"end":{"line":22,"column":75}},"13":{"start":{"line":23,"column":22},"end":{"line":23,"column":24}},"14":{"start":{"line":24,"column":4},"end":{"line":29,"column":5}},"15":{"start":{"line":25,"column":26},"end":{"line":25,"column":68}},"16":{"start":{"line":26,"column":18},"end":{"line":26,"column":65}},"17":{"start":{"line":27,"column":17},"end":{"line":27,"column":38}},"18":{"start":{"line":28,"column":6},"end":{"line":28,"column":26}},"19":{"start":{"line":30,"column":4},"end":{"line":30,"column":21}},"20":{"start":{"line":33,"column":22},"end":{"line":33,"column":24}},"21":{"start":{"line":34,"column":4},"end":{"line":45,"column":5}},"22":{"start":{"line":35,"column":23},"end":{"line":35,"column":59}},"23":{"start":{"line":36,"column":6},"end":{"line":44,"column":7}},"24":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"25":{"start":{"line":38,"column":10},"end":{"line":38,"column":35}},"26":{"start":{"line":40,"column":24},"end":{"line":40,"column":46}},"27":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"28":{"start":{"line":42,"column":10},"end":{"line":42,"column":35}},"29":{"start":{"line":46,"column":4},"end":{"line":46,"column":21}},"30":{"start":{"line":49,"column":33},"end":{"line":49,"column":46}},"31":{"start":{"line":50,"column":21},"end":{"line":50,"column":35}},"32":{"start":{"line":51,"column":25},"end":{"line":51,"column":46}},"33":{"start":{"line":52,"column":17},"end":{"line":52,"column":44}},"34":{"start":{"line":53,"column":18},"end":{"line":53,"column":54}},"35":{"start":{"line":54,"column":26},"end":{"line":54,"column":38}},"36":{"start":{"line":55,"column":25},"end":{"line":58,"column":5}},"37":{"start":{"line":59,"column":28},"end":{"line":59,"column":43}},"38":{"start":{"line":60,"column":20},"end":{"line":60,"column":22}},"39":{"start":{"line":61,"column":4},"end":{"line":65,"column":5}},"40":{"start":{"line":62,"column":6},"end":{"line":62,"column":50}},"41":{"start":{"line":64,"column":6},"end":{"line":64,"column":72}},"42":{"start":{"line":64,"column":53},"end":{"line":64,"column":69}},"43":{"start":{"line":66,"column":37},"end":{"line":74,"column":6}},"44":{"start":{"line":67,"column":6},"end":{"line":73,"column":7}},"45":{"start":{"line":68,"column":8},"end":{"line":68,"column":58}},"46":{"start":{"line":68,"column":40},"end":{"line":68,"column":56}},"47":{"start":{"line":70,"column":8},"end":{"line":72,"column":11}},"48":{"start":{"line":71,"column":10},"end":{"line":71,"column":82}},"49":{"start":{"line":71,"column":57},"end":{"line":71,"column":80}},"50":{"start":{"line":75,"column":4},"end":{"line":85,"column":5}},"51":{"start":{"line":76,"column":6},"end":{"line":76,"column":40}},"52":{"start":{"line":77,"column":6},"end":{"line":77,"column":40}},"53":{"start":{"line":78,"column":6},"end":{"line":82,"column":7}},"54":{"start":{"line":79,"column":8},"end":{"line":79,"column":47}},"55":{"start":{"line":81,"column":8},"end":{"line":81,"column":50}},"56":{"start":{"line":84,"column":6},"end":{"line":84,"column":43}},"57":{"start":{"line":86,"column":22},"end":{"line":86,"column":46}},"58":{"start":{"line":87,"column":24},"end":{"line":87,"column":64}},"59":{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},"60":{"start":{"line":89,"column":6},"end":{"line":89,"column":31}},"61":{"start":{"line":91,"column":20},"end":{"line":95,"column":5}},"62":{"start":{"line":96,"column":27},"end":{"line":96,"column":78}},"63":{"start":{"line":97,"column":4},"end":{"line":97,"column":47}},"64":{"start":{"line":98,"column":4},"end":{"line":98,"column":53}},"65":{"start":{"line":99,"column":4},"end":{"line":101,"column":6}},"66":{"start":{"line":104,"column":19},"end":{"line":104,"column":50}},"67":{"start":{"line":105,"column":4},"end":{"line":108,"column":6}},"68":{"start":{"line":111,"column":4},"end":{"line":111,"column":47}},"69":{"start":{"line":114,"column":4},"end":{"line":114,"column":47}},"70":{"start":{"line":117,"column":4},"end":{"line":117,"column":86}},"71":{"start":{"line":118,"column":4},"end":{"line":118,"column":16}},"72":{"start":{"line":121,"column":4},"end":{"line":121,"column":29}},"73":{"start":{"line":124,"column":4},"end":{"line":124,"column":40}},"74":{"start":{"line":127,"column":4},"end":{"line":127,"column":29}},"75":{"start":{"line":130,"column":4},"end":{"line":130,"column":55}},"76":{"start":{"line":133,"column":4},"end":{"line":133,"column":29}},"77":{"start":{"line":136,"column":41},"end":{"line":136,"column":50}},"78":{"start":{"line":137,"column":22},"end":{"line":137,"column":88}},"79":{"start":{"line":138,"column":4},"end":{"line":143,"column":5}},"80":{"start":{"line":139,"column":26},"end":{"line":139,"column":68}},"81":{"start":{"line":140,"column":20},"end":{"line":140,"column":67}},"82":{"start":{"line":141,"column":24},"end":{"line":141,"column":47}},"83":{"start":{"line":142,"column":6},"end":{"line":142,"column":41}},"84":{"start":{"line":144,"column":4},"end":{"line":144,"column":24}},"85":{"start":{"line":147,"column":24},"end":{"line":147,"column":40}},"86":{"start":{"line":148,"column":16},"end":{"line":151,"column":5}},"87":{"start":{"line":152,"column":22},"end":{"line":152,"column":50}},"88":{"start":{"line":153,"column":18},"end":{"line":153,"column":20}},"89":{"start":{"line":154,"column":4},"end":{"line":169,"column":5}},"90":{"start":{"line":155,"column":24},"end":{"line":155,"column":66}},"91":{"start":{"line":156,"column":31},"end":{"line":156,"column":83}},"92":{"start":{"line":157,"column":6},"end":{"line":168,"column":7}},"93":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"94":{"start":{"line":159,"column":10},"end":{"line":159,"column":38}},"95":{"start":{"line":162,"column":8},"end":{"line":166,"column":9}},"96":{"start":{"line":163,"column":10},"end":{"line":163,"column":54}},"97":{"start":{"line":165,"column":10},"end":{"line":165,"column":44}},"98":{"start":{"line":167,"column":8},"end":{"line":167,"column":36}},"99":{"start":{"line":170,"column":24},"end":{"line":176,"column":5}},"100":{"start":{"line":177,"column":4},"end":{"line":177,"column":35}},"101":{"start":{"line":178,"column":27},"end":{"line":178,"column":53}},"102":{"start":{"line":179,"column":4},"end":{"line":184,"column":5}},"103":{"start":{"line":179,"column":17},"end":{"line":179,"column":18}},"104":{"start":{"line":180,"column":23},"end":{"line":180,"column":40}},"105":{"start":{"line":181,"column":20},"end":{"line":181,"column":50}},"106":{"start":{"line":182,"column":6},"end":{"line":182,"column":90}},"107":{"start":{"line":183,"column":6},"end":{"line":183,"column":45}},"108":{"start":{"line":185,"column":27},"end":{"line":185,"column":53}},"109":{"start":{"line":186,"column":4},"end":{"line":191,"column":5}},"110":{"start":{"line":186,"column":17},"end":{"line":186,"column":18}},"111":{"start":{"line":187,"column":23},"end":{"line":187,"column":40}},"112":{"start":{"line":188,"column":20},"end":{"line":188,"column":50}},"113":{"start":{"line":189,"column":6},"end":{"line":189,"column":90}},"114":{"start":{"line":190,"column":6},"end":{"line":190,"column":45}},"115":{"start":{"line":192,"column":4},"end":{"line":203,"column":5}},"116":{"start":{"line":193,"column":24},"end":{"line":193,"column":70}},"117":{"start":{"line":194,"column":6},"end":{"line":197,"column":8}},"118":{"start":{"line":198,"column":22},"end":{"line":198,"column":27}},"119":{"start":{"line":199,"column":6},"end":{"line":201,"column":9}},"120":{"start":{"line":200,"column":8},"end":{"line":200,"column":32}},"121":{"start":{"line":202,"column":6},"end":{"line":202,"column":48}},"122":{"start":{"line":204,"column":4},"end":{"line":204,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":2},"end":{"line":8,"column":3}},"loc":{"start":{"line":8,"column":86},"end":{"line":19,"column":3}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":2},"end":{"line":20,"column":3}},"loc":{"start":{"line":20,"column":44},"end":{"line":31,"column":3}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":42},"end":{"line":22,"column":43}},"loc":{"start":{"line":22,"column":52},"end":{"line":22,"column":75}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":32,"column":2},"end":{"line":32,"column":3}},"loc":{"start":{"line":32,"column":60},"end":{"line":47,"column":3}},"line":32},"4":{"name":"(anonymous_4)","decl":{"start":{"line":48,"column":2},"end":{"line":48,"column":3}},"loc":{"start":{"line":48,"column":29},"end":{"line":102,"column":3}},"line":48},"5":{"name":"(anonymous_5)","decl":{"start":{"line":64,"column":42},"end":{"line":64,"column":43}},"loc":{"start":{"line":64,"column":53},"end":{"line":64,"column":69}},"line":64},"6":{"name":"(anonymous_6)","decl":{"start":{"line":66,"column":63},"end":{"line":66,"column":64}},"loc":{"start":{"line":66,"column":74},"end":{"line":74,"column":5}},"line":66},"7":{"name":"(anonymous_7)","decl":{"start":{"line":68,"column":28},"end":{"line":68,"column":29}},"loc":{"start":{"line":68,"column":40},"end":{"line":68,"column":56}},"line":68},"8":{"name":"(anonymous_8)","decl":{"start":{"line":70,"column":26},"end":{"line":70,"column":27}},"loc":{"start":{"line":70,"column":40},"end":{"line":72,"column":9}},"line":70},"9":{"name":"(anonymous_9)","decl":{"start":{"line":71,"column":41},"end":{"line":71,"column":42}},"loc":{"start":{"line":71,"column":57},"end":{"line":71,"column":80}},"line":71},"10":{"name":"(anonymous_10)","decl":{"start":{"line":103,"column":2},"end":{"line":103,"column":3}},"loc":{"start":{"line":103,"column":29},"end":{"line":109,"column":3}},"line":103},"11":{"name":"(anonymous_11)","decl":{"start":{"line":110,"column":2},"end":{"line":110,"column":3}},"loc":{"start":{"line":110,"column":54},"end":{"line":112,"column":3}},"line":110},"12":{"name":"(anonymous_12)","decl":{"start":{"line":113,"column":2},"end":{"line":113,"column":3}},"loc":{"start":{"line":113,"column":46},"end":{"line":115,"column":3}},"line":113},"13":{"name":"(anonymous_13)","decl":{"start":{"line":116,"column":2},"end":{"line":116,"column":3}},"loc":{"start":{"line":116,"column":36},"end":{"line":119,"column":3}},"line":116},"14":{"name":"(anonymous_14)","decl":{"start":{"line":120,"column":2},"end":{"line":120,"column":3}},"loc":{"start":{"line":120,"column":10},"end":{"line":122,"column":3}},"line":120},"15":{"name":"(anonymous_15)","decl":{"start":{"line":123,"column":2},"end":{"line":123,"column":3}},"loc":{"start":{"line":123,"column":17},"end":{"line":125,"column":3}},"line":123},"16":{"name":"(anonymous_16)","decl":{"start":{"line":126,"column":2},"end":{"line":126,"column":3}},"loc":{"start":{"line":126,"column":11},"end":{"line":128,"column":3}},"line":126},"17":{"name":"(anonymous_17)","decl":{"start":{"line":129,"column":2},"end":{"line":129,"column":3}},"loc":{"start":{"line":129,"column":27},"end":{"line":131,"column":3}},"line":129},"18":{"name":"(anonymous_18)","decl":{"start":{"line":132,"column":2},"end":{"line":132,"column":3}},"loc":{"start":{"line":132,"column":45},"end":{"line":134,"column":3}},"line":132},"19":{"name":"(anonymous_19)","decl":{"start":{"line":135,"column":2},"end":{"line":135,"column":3}},"loc":{"start":{"line":135,"column":26},"end":{"line":145,"column":3}},"line":135},"20":{"name":"(anonymous_20)","decl":{"start":{"line":146,"column":2},"end":{"line":146,"column":3}},"loc":{"start":{"line":146,"column":43},"end":{"line":205,"column":3}},"line":146},"21":{"name":"(anonymous_21)","decl":{"start":{"line":199,"column":43},"end":{"line":199,"column":44}},"loc":{"start":{"line":199,"column":54},"end":{"line":201,"column":7}},"line":199}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":72},"end":{"line":8,"column":84}},"type":"default-arg","locations":[{"start":{"line":8,"column":83},"end":{"line":8,"column":84}}],"line":8},"1":{"loc":{"start":{"line":36,"column":6},"end":{"line":44,"column":7}},"type":"if","locations":[{"start":{"line":36,"column":6},"end":{"line":44,"column":7}},{"start":{},"end":{}}],"line":36},"2":{"loc":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},{"start":{},"end":{}}],"line":37},"3":{"loc":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},{"start":{},"end":{}}],"line":41},"4":{"loc":{"start":{"line":52,"column":17},"end":{"line":52,"column":44}},"type":"cond-expr","locations":[{"start":{"line":52,"column":30},"end":{"line":52,"column":40}},{"start":{"line":52,"column":43},"end":{"line":52,"column":44}}],"line":52},"5":{"loc":{"start":{"line":53,"column":18},"end":{"line":53,"column":54}},"type":"cond-expr","locations":[{"start":{"line":53,"column":32},"end":{"line":53,"column":43}},{"start":{"line":53,"column":46},"end":{"line":53,"column":54}}],"line":53},"6":{"loc":{"start":{"line":61,"column":4},"end":{"line":65,"column":5}},"type":"if","locations":[{"start":{"line":61,"column":4},"end":{"line":65,"column":5}},{"start":{"line":63,"column":11},"end":{"line":65,"column":5}}],"line":61},"7":{"loc":{"start":{"line":67,"column":6},"end":{"line":73,"column":7}},"type":"if","locations":[{"start":{"line":67,"column":6},"end":{"line":73,"column":7}},{"start":{"line":69,"column":13},"end":{"line":73,"column":7}}],"line":67},"8":{"loc":{"start":{"line":75,"column":4},"end":{"line":85,"column":5}},"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":85,"column":5}},{"start":{"line":83,"column":11},"end":{"line":85,"column":5}}],"line":75},"9":{"loc":{"start":{"line":78,"column":6},"end":{"line":82,"column":7}},"type":"if","locations":[{"start":{"line":78,"column":6},"end":{"line":82,"column":7}},{"start":{"line":80,"column":13},"end":{"line":82,"column":7}}],"line":78},"10":{"loc":{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},"type":"if","locations":[{"start":{"line":88,"column":4},"end":{"line":90,"column":5}},{"start":{},"end":{}}],"line":88},"11":{"loc":{"start":{"line":88,"column":8},"end":{"line":88,"column":47}},"type":"binary-expr","locations":[{"start":{"line":88,"column":8},"end":{"line":88,"column":20}},{"start":{"line":88,"column":24},"end":{"line":88,"column":47}}],"line":88},"12":{"loc":{"start":{"line":156,"column":31},"end":{"line":156,"column":83}},"type":"binary-expr","locations":[{"start":{"line":156,"column":31},"end":{"line":156,"column":55}},{"start":{"line":156,"column":59},"end":{"line":156,"column":83}}],"line":156},"13":{"loc":{"start":{"line":157,"column":6},"end":{"line":168,"column":7}},"type":"if","locations":[{"start":{"line":157,"column":6},"end":{"line":168,"column":7}},{"start":{"line":161,"column":13},"end":{"line":168,"column":7}}],"line":157},"14":{"loc":{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},"type":"if","locations":[{"start":{"line":158,"column":8},"end":{"line":160,"column":9}},{"start":{},"end":{}}],"line":158},"15":{"loc":{"start":{"line":158,"column":12},"end":{"line":158,"column":87}},"type":"binary-expr","locations":[{"start":{"line":158,"column":12},"end":{"line":158,"column":28}},{"start":{"line":158,"column":32},"end":{"line":158,"column":87}}],"line":158},"16":{"loc":{"start":{"line":162,"column":8},"end":{"line":166,"column":9}},"type":"if","locations":[{"start":{"line":162,"column":8},"end":{"line":166,"column":9}},{"start":{"line":164,"column":15},"end":{"line":166,"column":9}}],"line":162},"17":{"loc":{"start":{"line":162,"column":12},"end":{"line":162,"column":87}},"type":"binary-expr","locations":[{"start":{"line":162,"column":12},"end":{"line":162,"column":28}},{"start":{"line":162,"column":32},"end":{"line":162,"column":87}}],"line":162},"18":{"loc":{"start":{"line":192,"column":4},"end":{"line":203,"column":5}},"type":"if","locations":[{"start":{"line":192,"column":4},"end":{"line":203,"column":5}},{"start":{},"end":{}}],"line":192}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"b":{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0]},"inputSourceMap":{"version":3,"sources":["/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/instance.ts"],"sourcesContent":["import {\n    Subject, type Observable\n} from 'rxjs'\n\nimport { RxStorageInstance, StringKeys, RxDocumentData, RxConflictResultionTask, EventBulk, RxStorageChangeEvent, RxStorageDefaultCheckpoint, RxJsonSchema, getPrimaryFieldOfPrimaryKey, BulkWriteRow, RxConflictResultionTaskSolution, RxDocumentDataById, RxStorageBulkWriteResponse, RxStorageCountResult, RxStorageQueryResult, categorizeBulkWriteRows, ensureNotFalsy, now, getQueryMatcher, getSortComparator } from \"rxdb\";\nimport { IagonInternalParameters, IagonStorageInternals } from './types';\nimport { IagonInternals } from './internals';\nimport { QueryMatcher } from 'rxdb/dist/types/types';\nimport { fixTxPipe } from '@pluto-encrypted/shared';\n\n\nexport class IagonStorageInstance<\n    RxDocType,\n> implements RxStorageInstance<\n    RxDocType,\n    IagonStorageInternals<any>,\n    IagonInternalParameters,\n    RxStorageDefaultCheckpoint\n> {\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>\n\n    public isInitialised = false;\n\n    public conflictResultionTasks$ = new Subject<RxConflictResultionTask<RxDocType>>()\n    public changes$ = new Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>>()\n\n    constructor(\n        public databaseName: string,\n        public internals: IagonInternals<RxDocType>,\n        public options: Readonly<IagonInternalParameters>,\n        public schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public collectionName: string,\n        public refCount: number = 0\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey)\n    }\n\n    async findDocumentsById(ids: string[], withDeleted: boolean): Promise<RxDocumentDataById<RxDocType>> {\n        const allFiles = await this.internals.sdk.getFiles(this.internals.__dataFolder._id);\n        const matchingFiles = allFiles.filter((file) => ids.includes(file.name));\n        const documents: RxDocumentDataById<RxDocType> = {}\n        for (let file of matchingFiles) {\n            const fileContent = await this.internals.sdk.getFile({ file: file })\n            const doc = JSON.parse(Buffer.from(fileContent).toString());\n            const id = doc[this.primaryPath];\n            documents[id] = doc;\n        }\n        return documents\n    }\n\n\n    private async resolveDocumentIds(ids: string[], selectorKeys: string[], queryMatcher: QueryMatcher<RxDocumentData<RxDocType>>): Promise<Array<RxDocumentData<RxDocType>>> {\n        const documents: Array<RxDocumentData<RxDocType>> = [];\n        for (let documentId of ids) {\n            const document = await this.internals.get(documentId)\n            if (document) {\n                if (selectorKeys.length <= 0) {\n                    documents.push(document)\n                }\n                const matches = queryMatcher(document)\n                if (matches) {\n                    documents.push(document)\n                }\n            }\n        }\n        return documents\n    }\n\n    async query(preparedQuery: any): Promise<RxStorageQueryResult<RxDocType>> {\n        const { queryPlan, query } = preparedQuery\n        const selector = query.selector\n        const selectorKeys = Object.keys(selector)\n        const skip = query.skip ? query.skip : 0\n        const limit = query.limit ? query.limit : Infinity\n        const skipPlusLimit = skip + limit\n        const queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> = getQueryMatcher(\n            this.schema,\n            query\n        )\n\n        const queryPlanFields: string[] = queryPlan.index\n        const indexes: string[] = []\n        if (queryPlanFields.length === 1) {\n            indexes.push(fixTxPipe(queryPlanFields[0]!))\n        } else {\n            indexes.push(...queryPlanFields.map(field => fixTxPipe(field)))\n        }\n\n        const shouldAddCompoundIndexes = this.schema.indexes?.find((index) => {\n            if (typeof index === 'string') {\n                return indexes.find((index2) => index2 === index)\n            } else {\n                return index.find((subIndex) => {\n                    return subIndex === index.find((indexValue) => indexValue === subIndex)\n                })\n            }\n        })\n\n        if (shouldAddCompoundIndexes) {\n            indexes.splice(0, indexes.length)\n            indexes.push(this.collectionName)\n            if (typeof shouldAddCompoundIndexes === 'string') {\n                indexes.push(shouldAddCompoundIndexes)\n            } else {\n                indexes.push(...shouldAddCompoundIndexes)\n            }\n        } else {\n            indexes.unshift(this.collectionName)\n        }\n\n        const indexName: string = `[${indexes.join('+')}]`\n\n        const documentIds = await this.internals.getIndex(indexName)\n\n        if (!documentIds || documentIds.length <= 0) {\n            return { documents: [] }\n        }\n\n        let documents = await this.resolveDocumentIds(\n            documentIds,\n            selectorKeys,\n            queryMatcher\n        )\n\n        const sortComparator = getSortComparator(this.schema, preparedQuery.query)\n        documents = documents.sort(sortComparator)\n        documents = documents.slice(skip, skipPlusLimit)\n        return {\n            documents\n        }\n    }\n    async count(preparedQuery: any): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery)\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        }\n    }\n    getAttachmentData(documentId: string, attachmentId: string, digest: string): Promise<string> {\n        throw new Error('Method not implemented.');\n    }\n    getChangedDocumentsSince(limit: number, checkpoint?: any): Promise<{ documents: RxDocumentData<RxDocType>[]; checkpoint: any; }> {\n        throw new Error('Method not implemented.');\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        await this.internals.sdk.removeDirectory(this.internals.__collectionFolder, true)\n        return true\n    }\n    close(): Promise<void> {\n        return Promise.resolve()\n    }\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocType>, any>> {\n        return this.changes$.asObservable()\n    }\n    remove(): Promise<void> {\n        return Promise.resolve()\n    }\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.conflictResultionTasks$.asObservable()\n    }\n    resolveConflictResultionTask(taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return Promise.resolve()\n    }\n    private async getAllDocuments() {\n        const allDocuments: Map<string, RxDocumentData<RxDocType>> = new Map();\n        const dataFiles = await this.internals.sdk.getFiles(this.internals.__dataFolder._id);\n        for (let file of dataFiles) {\n            const fileContent = await this.internals.sdk.getFile({ file });\n            const rxDoc: RxDocumentData<RxDocType> = JSON.parse(Buffer.from(fileContent).toString())\n            const currentId = rxDoc[this.primaryPath] as any;\n            allDocuments.set(currentId, rxDoc)\n        }\n        return allDocuments\n    }\n    async bulkWrite(documentWrites: BulkWriteRow<RxDocType>[], context: string): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        const primaryPath = this.primaryPath\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: {},\n            error: {}\n        }\n        const documents = await this.getAllDocuments()\n        const fixed: BulkWriteRow<RxDocType>[] = []\n        for (let currentWriteDoc of documentWrites) {\n            const currentId = currentWriteDoc.document[this.primaryPath] as any;\n            const previousDocument = currentWriteDoc.previous ?? documents.get(currentId)\n            if (context === 'data-migrator-delete') {\n                if (previousDocument && previousDocument._rev === currentWriteDoc.document._rev) {\n                    fixed.push(currentWriteDoc)\n                }\n            } else {\n                if (previousDocument && previousDocument._rev !== currentWriteDoc.document._rev) {\n                    currentWriteDoc.previous = previousDocument\n                } else {\n                    currentWriteDoc.previous = undefined\n                }\n                fixed.push(currentWriteDoc)\n            }\n        }\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            primaryPath as any,\n            documents,\n            fixed,\n            context\n        )\n        ret.error = categorized.errors\n\n        /**\n         * Do inserts/updates\n         */\n        const bulkInsertDocs = categorized.bulkInsertDocs\n        for (let i = 0; i < bulkInsertDocs.length; ++i) {\n            const writeRow = bulkInsertDocs[i]!\n            const docId = writeRow.document[primaryPath]\n            await this.internals.bulkPut([writeRow.document], this.collectionName, this.schema)\n            ret.success[docId as any] = writeRow.document\n        }\n\n        const bulkUpdateDocs = categorized.bulkUpdateDocs\n        for (let i = 0; i < bulkUpdateDocs.length; ++i) {\n            const writeRow = bulkUpdateDocs[i]!\n            const docId = writeRow.document[primaryPath]\n            await this.internals.bulkPut([writeRow.document], this.collectionName, this.schema)\n            ret.success[docId as any] = writeRow.document\n        }\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document\n            categorized.eventBulk.checkpoint = {\n                id: lastState[primaryPath],\n                lwt: lastState._meta.lwt\n            }\n            const endTime = now()\n            categorized.eventBulk.events.forEach(event => {\n                (event as any).endTime = endTime\n            })\n            this.changes$.next(categorized.eventBulk)\n        }\n\n        return Promise.resolve(ret)\n    }\n}"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"33de6f28eb18f7d6adba3216a2b63a1fe81d29b3"},"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/internals.ts":{"path":"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/internals.ts","statementMap":{"0":{"start":{"line":6,"column":4},"end":{"line":6,"column":29}},"1":{"start":{"line":7,"column":4},"end":{"line":7,"column":45}},"2":{"start":{"line":8,"column":4},"end":{"line":8,"column":40}},"3":{"start":{"line":11,"column":4},"end":{"line":19,"column":7}},"4":{"start":{"line":12,"column":6},"end":{"line":17,"column":7}},"5":{"start":{"line":13,"column":22},"end":{"line":13,"column":96}},"6":{"start":{"line":13,"column":54},"end":{"line":13,"column":95}},"7":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"8":{"start":{"line":15,"column":10},"end":{"line":15,"column":23}},"9":{"start":{"line":18,"column":6},"end":{"line":18,"column":65}},"10":{"start":{"line":22,"column":28},"end":{"line":22,"column":59}},"11":{"start":{"line":23,"column":4},"end":{"line":25,"column":5}},"12":{"start":{"line":24,"column":6},"end":{"line":24,"column":54}},"13":{"start":{"line":28,"column":4},"end":{"line":68,"column":5}},"14":{"start":{"line":29,"column":6},"end":{"line":32,"column":7}},"15":{"start":{"line":30,"column":28},"end":{"line":30,"column":67}},"16":{"start":{"line":31,"column":8},"end":{"line":31,"column":44}},"17":{"start":{"line":33,"column":6},"end":{"line":42,"column":7}},"18":{"start":{"line":34,"column":28},"end":{"line":34,"column":84}},"19":{"start":{"line":35,"column":35},"end":{"line":35,"column":143}},"20":{"start":{"line":35,"column":92},"end":{"line":35,"column":135}},"21":{"start":{"line":36,"column":8},"end":{"line":41,"column":9}},"22":{"start":{"line":37,"column":10},"end":{"line":37,"column":55}},"23":{"start":{"line":39,"column":31},"end":{"line":39,"column":136}},"24":{"start":{"line":40,"column":10},"end":{"line":40,"column":49}},"25":{"start":{"line":43,"column":32},"end":{"line":43,"column":90}},"26":{"start":{"line":44,"column":27},"end":{"line":44,"column":142}},"27":{"start":{"line":44,"column":96},"end":{"line":44,"column":134}},"28":{"start":{"line":45,"column":24},"end":{"line":45,"column":136}},"29":{"start":{"line":45,"column":93},"end":{"line":45,"column":128}},"30":{"start":{"line":46,"column":6},"end":{"line":55,"column":7}},"31":{"start":{"line":47,"column":8},"end":{"line":54,"column":9}},"32":{"start":{"line":48,"column":10},"end":{"line":48,"column":44}},"33":{"start":{"line":50,"column":10},"end":{"line":53,"column":13}},"34":{"start":{"line":56,"column":6},"end":{"line":65,"column":7}},"35":{"start":{"line":57,"column":8},"end":{"line":64,"column":9}},"36":{"start":{"line":58,"column":10},"end":{"line":58,"column":40}},"37":{"start":{"line":60,"column":10},"end":{"line":63,"column":13}},"38":{"start":{"line":67,"column":6},"end":{"line":67,"column":33}},"39":{"start":{"line":71,"column":4},"end":{"line":71,"column":47}},"40":{"start":{"line":74,"column":20},"end":{"line":74,"column":44}},"41":{"start":{"line":75,"column":4},"end":{"line":75,"column":32}},"42":{"start":{"line":76,"column":4},"end":{"line":76,"column":78}},"43":{"start":{"line":79,"column":21},"end":{"line":79,"column":67}},"44":{"start":{"line":80,"column":26},"end":{"line":80,"column":72}},"45":{"start":{"line":80,"column":52},"end":{"line":80,"column":71}},"46":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"47":{"start":{"line":82,"column":6},"end":{"line":82,"column":42}},"48":{"start":{"line":86,"column":25},"end":{"line":86,"column":55}},"49":{"start":{"line":87,"column":27},"end":{"line":87,"column":84}},"50":{"start":{"line":88,"column":26},"end":{"line":88,"column":66}},"51":{"start":{"line":89,"column":23},"end":{"line":91,"column":6}},"52":{"start":{"line":90,"column":40},"end":{"line":90,"column":55}},"53":{"start":{"line":92,"column":4},"end":{"line":92,"column":90}},"54":{"start":{"line":95,"column":18},"end":{"line":95,"column":64}},"55":{"start":{"line":96,"column":22},"end":{"line":98,"column":6}},"56":{"start":{"line":97,"column":6},"end":{"line":97,"column":31}},"57":{"start":{"line":99,"column":4},"end":{"line":101,"column":5}},"58":{"start":{"line":100,"column":6},"end":{"line":100,"column":18}},"59":{"start":{"line":102,"column":25},"end":{"line":102,"column":68}},"60":{"start":{"line":103,"column":25},"end":{"line":103,"column":73}},"61":{"start":{"line":104,"column":4},"end":{"line":104,"column":24}},"62":{"start":{"line":107,"column":26},"end":{"line":107,"column":107}},"63":{"start":{"line":108,"column":27},"end":{"line":108,"column":48}},"64":{"start":{"line":109,"column":4},"end":{"line":129,"column":5}},"65":{"start":{"line":110,"column":27},"end":{"line":110,"column":40}},"66":{"start":{"line":111,"column":17},"end":{"line":111,"column":49}},"67":{"start":{"line":112,"column":6},"end":{"line":128,"column":7}},"68":{"start":{"line":113,"column":8},"end":{"line":116,"column":9}},"69":{"start":{"line":114,"column":32},"end":{"line":114,"column":82}},"70":{"start":{"line":115,"column":10},"end":{"line":115,"column":56}},"71":{"start":{"line":117,"column":8},"end":{"line":117,"column":79}},"72":{"start":{"line":118,"column":8},"end":{"line":118,"column":48}},"73":{"start":{"line":119,"column":8},"end":{"line":119,"column":33}},"74":{"start":{"line":121,"column":8},"end":{"line":124,"column":9}},"75":{"start":{"line":122,"column":32},"end":{"line":122,"column":82}},"76":{"start":{"line":123,"column":10},"end":{"line":123,"column":52}},"77":{"start":{"line":125,"column":8},"end":{"line":125,"column":75}},"78":{"start":{"line":126,"column":8},"end":{"line":126,"column":44}},"79":{"start":{"line":127,"column":8},"end":{"line":127,"column":36}},"80":{"start":{"line":132,"column":23},"end":{"line":132,"column":70}},"81":{"start":{"line":133,"column":27},"end":{"line":133,"column":78}},"82":{"start":{"line":134,"column":23},"end":{"line":136,"column":6}},"83":{"start":{"line":135,"column":6},"end":{"line":135,"column":47}},"84":{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},"85":{"start":{"line":138,"column":6},"end":{"line":138,"column":16}},"86":{"start":{"line":140,"column":26},"end":{"line":140,"column":70}},"87":{"start":{"line":141,"column":23},"end":{"line":141,"column":72}},"88":{"start":{"line":142,"column":4},"end":{"line":142,"column":22}},"89":{"start":{"line":145,"column":25},"end":{"line":145,"column":55}},"90":{"start":{"line":146,"column":27},"end":{"line":146,"column":84}},"91":{"start":{"line":147,"column":26},"end":{"line":147,"column":66}},"92":{"start":{"line":148,"column":23},"end":{"line":151,"column":8}},"93":{"start":{"line":152,"column":4},"end":{"line":152,"column":90}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":2},"end":{"line":5,"column":3}},"loc":{"start":{"line":5,"column":40},"end":{"line":9,"column":3}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":2},"end":{"line":10,"column":3}},"loc":{"start":{"line":10,"column":37},"end":{"line":20,"column":3}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":42},"end":{"line":11,"column":43}},"loc":{"start":{"line":11,"column":59},"end":{"line":19,"column":5}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":39},"end":{"line":13,"column":40}},"loc":{"start":{"line":13,"column":54},"end":{"line":13,"column":95}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":21,"column":2},"end":{"line":21,"column":3}},"loc":{"start":{"line":21,"column":24},"end":{"line":26,"column":3}},"line":21},"5":{"name":"(anonymous_5)","decl":{"start":{"line":27,"column":2},"end":{"line":27,"column":3}},"loc":{"start":{"line":27,"column":51},"end":{"line":69,"column":3}},"line":27},"6":{"name":"(anonymous_6)","decl":{"start":{"line":35,"column":77},"end":{"line":35,"column":78}},"loc":{"start":{"line":35,"column":92},"end":{"line":35,"column":135}},"line":35},"7":{"name":"(anonymous_7)","decl":{"start":{"line":44,"column":81},"end":{"line":44,"column":82}},"loc":{"start":{"line":44,"column":96},"end":{"line":44,"column":134}},"line":44},"8":{"name":"(anonymous_8)","decl":{"start":{"line":45,"column":78},"end":{"line":45,"column":79}},"loc":{"start":{"line":45,"column":93},"end":{"line":45,"column":128}},"line":45},"9":{"name":"(anonymous_9)","decl":{"start":{"line":70,"column":2},"end":{"line":70,"column":3}},"loc":{"start":{"line":70,"column":16},"end":{"line":72,"column":3}},"line":70},"10":{"name":"(anonymous_10)","decl":{"start":{"line":73,"column":2},"end":{"line":73,"column":3}},"loc":{"start":{"line":73,"column":32},"end":{"line":77,"column":3}},"line":73},"11":{"name":"(anonymous_11)","decl":{"start":{"line":78,"column":2},"end":{"line":78,"column":3}},"loc":{"start":{"line":78,"column":25},"end":{"line":84,"column":3}},"line":78},"12":{"name":"(anonymous_12)","decl":{"start":{"line":80,"column":42},"end":{"line":80,"column":43}},"loc":{"start":{"line":80,"column":52},"end":{"line":80,"column":71}},"line":80},"13":{"name":"(anonymous_13)","decl":{"start":{"line":85,"column":2},"end":{"line":85,"column":3}},"loc":{"start":{"line":85,"column":42},"end":{"line":93,"column":3}},"line":85},"14":{"name":"(anonymous_14)","decl":{"start":{"line":90,"column":29},"end":{"line":90,"column":30}},"loc":{"start":{"line":90,"column":40},"end":{"line":90,"column":55}},"line":90},"15":{"name":"(anonymous_15)","decl":{"start":{"line":94,"column":2},"end":{"line":94,"column":3}},"loc":{"start":{"line":94,"column":17},"end":{"line":105,"column":3}},"line":94},"16":{"name":"(anonymous_16)","decl":{"start":{"line":96,"column":33},"end":{"line":96,"column":34}},"loc":{"start":{"line":96,"column":43},"end":{"line":98,"column":5}},"line":96},"17":{"name":"(anonymous_17)","decl":{"start":{"line":106,"column":2},"end":{"line":106,"column":3}},"loc":{"start":{"line":106,"column":47},"end":{"line":130,"column":3}},"line":106},"18":{"name":"(anonymous_18)","decl":{"start":{"line":131,"column":2},"end":{"line":131,"column":3}},"loc":{"start":{"line":131,"column":22},"end":{"line":143,"column":3}},"line":131},"19":{"name":"(anonymous_19)","decl":{"start":{"line":134,"column":49},"end":{"line":134,"column":50}},"loc":{"start":{"line":134,"column":64},"end":{"line":136,"column":5}},"line":134},"20":{"name":"(anonymous_20)","decl":{"start":{"line":144,"column":2},"end":{"line":144,"column":3}},"loc":{"start":{"line":144,"column":38},"end":{"line":153,"column":3}},"line":144}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":26},"end":{"line":5,"column":38}},"type":"default-arg","locations":[{"start":{"line":5,"column":37},"end":{"line":5,"column":38}}],"line":5},"1":{"loc":{"start":{"line":12,"column":6},"end":{"line":17,"column":7}},"type":"if","locations":[{"start":{"line":12,"column":6},"end":{"line":17,"column":7}},{"start":{},"end":{}}],"line":12},"2":{"loc":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},{"start":{},"end":{}}],"line":14},"3":{"loc":{"start":{"line":29,"column":6},"end":{"line":32,"column":7}},"type":"if","locations":[{"start":{"line":29,"column":6},"end":{"line":32,"column":7}},{"start":{},"end":{}}],"line":29},"4":{"loc":{"start":{"line":33,"column":6},"end":{"line":42,"column":7}},"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":42,"column":7}},{"start":{},"end":{}}],"line":33},"5":{"loc":{"start":{"line":35,"column":35},"end":{"line":35,"column":143}},"type":"cond-expr","locations":[{"start":{"line":35,"column":60},"end":{"line":35,"column":136}},{"start":{"line":35,"column":139},"end":{"line":35,"column":143}}],"line":35},"6":{"loc":{"start":{"line":36,"column":8},"end":{"line":41,"column":9}},"type":"if","locations":[{"start":{"line":36,"column":8},"end":{"line":41,"column":9}},{"start":{"line":38,"column":15},"end":{"line":41,"column":9}}],"line":36},"7":{"loc":{"start":{"line":44,"column":27},"end":{"line":44,"column":142}},"type":"cond-expr","locations":[{"start":{"line":44,"column":58},"end":{"line":44,"column":135}},{"start":{"line":44,"column":138},"end":{"line":44,"column":142}}],"line":44},"8":{"loc":{"start":{"line":45,"column":24},"end":{"line":45,"column":136}},"type":"cond-expr","locations":[{"start":{"line":45,"column":55},"end":{"line":45,"column":129}},{"start":{"line":45,"column":132},"end":{"line":45,"column":136}}],"line":45},"9":{"loc":{"start":{"line":46,"column":6},"end":{"line":55,"column":7}},"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":55,"column":7}},{"start":{},"end":{}}],"line":46},"10":{"loc":{"start":{"line":47,"column":8},"end":{"line":54,"column":9}},"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":54,"column":9}},{"start":{"line":49,"column":15},"end":{"line":54,"column":9}}],"line":47},"11":{"loc":{"start":{"line":56,"column":6},"end":{"line":65,"column":7}},"type":"if","locations":[{"start":{"line":56,"column":6},"end":{"line":65,"column":7}},{"start":{},"end":{}}],"line":56},"12":{"loc":{"start":{"line":57,"column":8},"end":{"line":64,"column":9}},"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":64,"column":9}},{"start":{"line":59,"column":15},"end":{"line":64,"column":9}}],"line":57},"13":{"loc":{"start":{"line":99,"column":4},"end":{"line":101,"column":5}},"type":"if","locations":[{"start":{"line":99,"column":4},"end":{"line":101,"column":5}},{"start":{},"end":{}}],"line":99},"14":{"loc":{"start":{"line":107,"column":26},"end":{"line":107,"column":107}},"type":"cond-expr","locations":[{"start":{"line":107,"column":66},"end":{"line":107,"column":83}},{"start":{"line":107,"column":86},"end":{"line":107,"column":107}}],"line":107},"15":{"loc":{"start":{"line":112,"column":6},"end":{"line":128,"column":7}},"type":"if","locations":[{"start":{"line":112,"column":6},"end":{"line":128,"column":7}},{"start":{"line":120,"column":13},"end":{"line":128,"column":7}}],"line":112},"16":{"loc":{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},"type":"if","locations":[{"start":{"line":137,"column":4},"end":{"line":139,"column":5}},{"start":{},"end":{}}],"line":137}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"b":{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"inputSourceMap":{"version":3,"sources":["/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/internals.ts"],"sourcesContent":["import {\n    RxDocumentData,\n    RxDocumentDataById,\n    RxJsonSchema\n} from \"rxdb\";\nimport { IagonAPI } from \"./api\";\nimport { IagonFolder, IagonInternalParameters, IagonStorageInternals } from \"./types\";\nimport { getPrivateKeyValue, safeIndexList } from \"@pluto-encrypted/shared\";\n\n\nexport class IagonInternals<RxDocType> implements IagonStorageInternals<RxDocType> {\n    public __databaseFolder!: IagonFolder;\n    public __collectionFolder!: IagonFolder;\n    public __indexFolder!: IagonFolder;\n    public __dataFolder!: IagonFolder;\n    public indexes: Map<string, IagonFolder> = new Map()\n\n    public sdk: IagonAPI;\n\n\n    constructor(parameters: IagonInternalParameters, public refCount: number = 0) {\n        this.sdk = new IagonAPI(parameters)\n    }\n\n    async getDBDirectory(databaseName: string) {\n        return this.sdk.getDirectories().then((directories) => {\n            if (directories.length > 0) {\n                const found = directories.find((directory) => directory.directory_name === databaseName)\n                if (found) {\n                    return found;\n                }\n            }\n            return this.sdk.createDirectory({ dirName: databaseName });\n        })\n    }\n\n    private async resetDatabase() {\n        const rootDirectories = await this.sdk.getDirectories();\n        for (let directory of rootDirectories) {\n            await this.sdk.removeDirectory(directory, true)\n        }\n    }\n\n    async initialiseDB(databaseName: string, collectionName: string) {\n        try {\n            if (!this.__databaseFolder) {\n                const databaseDir = await this.getDBDirectory(databaseName);\n                this.__databaseFolder = databaseDir;\n            }\n\n            if (!this.__collectionFolder) {\n                const collections = await this.sdk.getDirectories(this.__databaseFolder._id);\n                const __collectionFolder = collections.length > 0 ? collections.find((directory) => directory.directory_name === collectionName) : null;\n\n                if (__collectionFolder) {\n                    this.__collectionFolder = __collectionFolder;\n                } else {\n                    const newDirectory = await this.sdk.createDirectory({ parentDirectoryId: this.__databaseFolder._id, dirName: collectionName })\n                    this.__collectionFolder = newDirectory\n                }\n            }\n\n            const collectionFolders = await this.sdk.getDirectories(this.__collectionFolder._id);\n            const indexesFound = collectionFolders.length > 0 ? collectionFolders.find((directory) => directory.directory_name === \"indexes\") : null;\n            const dataFound = collectionFolders.length > 0 ? collectionFolders.find((directory) => directory.directory_name === \"data\") : null;\n\n            if (!this.__indexFolder) {\n                if (indexesFound) {\n                    this.__indexFolder = indexesFound;\n                } else {\n                    this.__indexFolder = await this.sdk.createDirectory({\n                        parentDirectoryId: this.__collectionFolder._id,\n                        dirName: 'indexes'\n                    })\n                }\n            }\n\n            if (!this.__dataFolder) {\n                if (dataFound) {\n                    this.__dataFolder = dataFound;\n                } else {\n                    this.__dataFolder = await this.sdk.createDirectory({\n                        parentDirectoryId: this.__collectionFolder._id,\n                        dirName: 'data'\n                    })\n                }\n            }\n\n\n        } catch (err) {\n            return Promise.reject(err)\n        }\n    }\n\n\n    bulkGet(keys: string[]): Promise<RxDocumentDataById<RxDocType>> {\n        throw new Error(\"Method not implemented.\");\n    }\n    async addDoc(docId: string, document: RxDocumentData<RxDocType>): Promise<void> {\n        const jsonDoc = JSON.stringify(document)\n        await this.removeDoc(docId)\n        await this.sdk.uploadFile(this.__dataFolder, docId, Buffer.from(jsonDoc))\n    }\n    async removeDoc(docId: string): Promise<void> {\n        const allFiles = await this.sdk.getFiles(this.__dataFolder._id);\n        const matchingFiles = allFiles.filter((file) => file.name === docId)\n        for (let file of matchingFiles) {\n            await this.sdk.removeFile(file._id)\n        }\n    }\n    async removeFromIndex(indexName: string, docId: string): Promise<void> {\n        const currentIndex = await this.getIndex(indexName)\n        const cleanIndexPath = indexName.replace(/\\[(.*)\\]/g, \"$1\").split(\"+\").join(\"/\");\n        const indexFilename = `${cleanIndexPath.split(\"/\").join(\"_\")}`;\n        const jsonString = JSON.stringify([\n            ...currentIndex.filter((index) => index !== docId),\n        ])\n        await this.sdk.uploadFile(this.__indexFolder, indexFilename, Buffer.from(jsonString))\n    }\n    async get(key: string): Promise<RxDocumentData<RxDocType> | null> {\n        const files = await this.sdk.getFiles(this.__dataFolder._id);\n        const fileFound = files.find((file) => {\n            return file.name === key;\n        })\n        if (!fileFound) {\n            return null;\n        }\n        const fileContents = await this.sdk.getFile({ file: fileFound })\n        const jsonDocument: RxDocumentData<RxDocType> = JSON.parse(Buffer.from(fileContents).toString());\n        return jsonDocument\n    }\n    async bulkPut(items: RxDocumentData<RxDocType>[], collectionName: string, schema: RxJsonSchema<RxDocumentData<RxDocType>>): Promise<void> {\n        const primaryKeyKey = typeof schema.primaryKey === 'string' ? schema.primaryKey : schema.primaryKey.key\n        const saferIndexList = safeIndexList(schema)\n        for (const item of items) {\n            const shouldDelete = item._deleted\n            const id = getPrivateKeyValue(item, schema)\n            if (shouldDelete) {\n                for (const requiredIndexes of saferIndexList) {\n                    const requiredIndex = `[${collectionName}+${requiredIndexes.join('+')}]`\n                    await this.removeFromIndex(requiredIndex, id)\n                }\n                await this.removeFromIndex(`[${collectionName}+${primaryKeyKey}]`, id)\n                await this.removeFromIndex('[all]', id)\n                await this.removeDoc(id)\n            } else {\n                for (const requiredIndexes of saferIndexList) {\n                    const requiredIndex = `[${collectionName}+${requiredIndexes.join('+')}]`\n                    await this.updateIndex(requiredIndex, id)\n                }\n                await this.updateIndex(`[${collectionName}+${primaryKeyKey}]`, id)\n                await this.updateIndex('[all]', id)\n                await this.addDoc(id, item)\n            }\n        }\n    }\n\n    async getIndex(key: string): Promise<string[]> {\n        const indexFiles = await this.sdk.getFiles(this.__indexFolder._id);\n        const cleanIndexPath = key.replace(/\\[(.*)\\]/g, \"$1\").split(\"+\").join(\"_\");\n        const indexFound = indexFiles.reverse().find((indexFile) => {\n            return indexFile.name === cleanIndexPath\n        });\n        if (!indexFound) {\n            return [];\n        }\n        const indexContents = await this.sdk.getFile({ file: indexFound })\n        const jsonParsed: string[] = JSON.parse(Buffer.from(indexContents).toString())\n        return jsonParsed\n    }\n\n    async updateIndex(indexName: string, docId: string) {\n        const currentIndex = await this.getIndex(indexName)\n        const cleanIndexPath = indexName.replace(/\\[(.*)\\]/g, \"$1\").split(\"+\").join(\"/\");\n        const indexFilename = `${cleanIndexPath.split(\"/\").join(\"_\")}`;\n        const jsonString = JSON.stringify(Array.from(new Set([\n            ...currentIndex,\n            docId\n        ])))\n        await this.sdk.uploadFile(this.__indexFolder, indexFilename, Buffer.from(jsonString))\n    }\n\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"81c19842fad2999ea2ac4f6177c8fec11e25195e"},"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/index.ts":{"path":"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/index.ts","statementMap":{"0":{"start":{"line":8,"column":4},"end":{"line":8,"column":29}},"1":{"start":{"line":9,"column":4},"end":{"line":9,"column":24}},"2":{"start":{"line":10,"column":4},"end":{"line":10,"column":43}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":54}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":22}},"5":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"6":{"start":{"line":16,"column":6},"end":{"line":16,"column":118}},"7":{"start":{"line":18,"column":4},"end":{"line":18,"column":20}},"8":{"start":{"line":19,"column":22},"end":{"line":19,"column":70}},"9":{"start":{"line":20,"column":4},"end":{"line":20,"column":77}},"10":{"start":{"line":21,"column":4},"end":{"line":27,"column":6}},"11":{"start":{"line":31,"column":18},"end":{"line":31,"column":46}},"12":{"start":{"line":32,"column":2},"end":{"line":34,"column":5}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":2},"end":{"line":7,"column":3}},"loc":{"start":{"line":7,"column":24},"end":{"line":13,"column":3}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":38},"end":{"line":28,"column":3}},"line":14},"2":{"name":"createIagonStorage","decl":{"start":{"line":30,"column":16},"end":{"line":30,"column":34}},"loc":{"start":{"line":30,"column":47},"end":{"line":35,"column":1}},"line":30}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":17,"column":5}},{"start":{},"end":{}}],"line":15}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n * @module indexdb\n * @description This is a RXDB IndexDB storage that supports encryption middleware.\n * In order to use this in your pluto-encrypted database you must write the following code:\n * Creating a IndexDB compatible storage is very simple.\n * \n * ```typescript\n * import IndexDB from \"@pluto-encrypted/indexdb\";\n * import { Database } from \"@pluto-encrypted/database\";\n * //default password must be 32 bytes long\n * const defaultPassword = new Uint8Array(32).fill(1);\n * const database = db = await Database.createEncrypted({\n *          name: `my-db`,\n *          encryptionKey: defaultPassword,\n *          storage: IndexDB,\n * });\n * ```\n *\n */\n\nimport { wrappedKeyEncryptionStorage } from '@pluto-encrypted/encryption'\nimport { RxStorage, RxStorageDefaultStatics, RxStorageInstanceCreationParams, newRxError } from 'rxdb'\n\nimport { IagonStorageInstance } from './instance'\nimport { IagonInternalParameters, IagonStorageInternals } from './types'\nimport { IagonInternals } from './internals'\n\nclass IagonStorage<\n  RxDocType,\n>{\n  public name = \"iagon\"\n  public statics = RxStorageDefaultStatics;\n  public internalInstance: Map<string, IagonInternals<RxDocType>> = new Map()\n  public refCount = 0;\n\n  constructor(\n    private settings: IagonInternalParameters,\n  ) { }\n\n  async createStorageInstance<RxDocType>(params: RxStorageInstanceCreationParams<RxDocType, any>) {\n    if (params.schema.keyCompression) {\n      throw newRxError('UT5', { args: { databaseName: params.databaseName, collectionName: params.collectionName } })\n    }\n    this.refCount++;\n\n    const internals = new IagonInternals<any>(this.settings, this.refCount)\n    await internals.initialiseDB(params.databaseName, params.collectionName)\n\n    return new IagonStorageInstance<any>(\n      params.databaseName,\n      internals,\n      params.options,\n      params.schema,\n      params.collectionName\n    );\n  }\n}\n\nexport function createIagonStorage(parameters: IagonInternalParameters) {\n  const storage: RxStorage<any, any> = new IagonStorage<any>(parameters)\n  return wrappedKeyEncryptionStorage({\n    storage: storage\n  });\n}\n"],"mappings":";AAqBA,SAAS,mCAAmC;AAC5C,SAAoB,yBAA0D,kBAAkB;AAEhG,SAAS,4BAA4B;AAErC,SAAS,sBAAsB;AAE/B,MAAM,aAEL;AAAA,EAMC,YACU,UACR;AADQ;AANV,SAAO,OAAO;AACd,SAAO,UAAU;AACjB,SAAO,mBAA2D,oBAAI,IAAI;AAC1E,SAAO,WAAW;AAAA,EAId;AAAA,EAEJ,MAAM,sBAAiC,QAAyD;AAC9F,QAAI,OAAO,OAAO,gBAAgB;AAChC,YAAM,WAAW,OAAO,EAAE,MAAM,EAAE,cAAc,OAAO,cAAc,gBAAgB,OAAO,eAAe,EAAE,CAAC;AAAA,IAChH;AACA,SAAK;AAEL,UAAM,YAAY,IAAI,eAAoB,KAAK,UAAU,KAAK,QAAQ;AACtE,UAAM,UAAU,aAAa,OAAO,cAAc,OAAO,cAAc;AAEvE,WAAO,IAAI;AAAA,MACT,OAAO;AAAA,MACP;AAAA,MACA,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,IACT;AAAA,EACF;AACF;AAEO,gBAAS,mBAAmB,YAAqC;AACtE,QAAM,UAA+B,IAAI,aAAkB,UAAU;AACrE,SAAO,4BAA4B;AAAA,IACjC;AAAA,EACF,CAAC;AACH;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4b4ee3ad8c66a5b5920913bc784a96fd056d948e"},"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/types.ts":{"path":"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/types.ts","statementMap":{"0":{"start":{"line":2,"column":40},"end":{"line":6,"column":20}},"1":{"start":{"line":3,"column":2},"end":{"line":3,"column":37}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":35}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":21}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":41},"end":{"line":2,"column":42}},"loc":{"start":{"line":2,"column":58},"end":{"line":6,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":3},"end":{"line":6,"column":19}},"type":"binary-expr","locations":[{"start":{"line":6,"column":3},"end":{"line":6,"column":13}},{"start":{"line":6,"column":17},"end":{"line":6,"column":19}}],"line":6}},"s":{"0":1,"1":1,"2":1,"3":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"sources":["/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/IagonStorage/types.ts"],"sourcesContent":["import { RxDocumentData, RxDocumentDataById, RxJsonSchema } from \"rxdb\"\n\n\n\nexport type IagonInternalParameters = {\n    apiKey: string,\n    password: Uint8Array\n}\n\nexport enum VISIBILITY {\n    private = \"private\",\n    public = \"public\"\n}\n\nexport type IagonFolder = {\n    __v: number,\n    _id: string,\n    client_id: string,\n    created_at: string,\n    directory_name: string,\n    index_listing: boolean,\n    parent_directory_id: string | null,\n    path: string,\n    updated_at: string,\n    visibility: VISIBILITY\n}\n\nexport type IagonFile = {\n    __v: number,\n    _id: string,\n    availability: string,\n    client_id: string,\n    createdAt: string,\n    file_size_byte_encrypted: 24,\n    file_size_byte_native: 0,\n    index_listing: boolean,\n    name: string,\n    parent_directory_id: string | null,\n    path: string,\n    region: string | null,\n    unique_id: string,\n    updated_at: string,\n    visibility: VISIBILITY\n}\n\nexport type IagonResponse<Data> = {\n    success: true,\n    data: Data\n} | {\n    success: false,\n    message: string\n}\n\nexport type IagonStorageInternals<RxDocType> = {\n    __databaseFolder: IagonFolder;\n    __collectionFolder: IagonFolder;\n    __indexFolder: IagonFolder;\n    __dataFolder: IagonFolder;\n    refCount: number;\n\n    getDBDirectory(databaseName: string): Promise<IagonFolder>\n    initialiseDB(databaseName: string, collectionName: string): Promise<void>\n    bulkGet(keys: string[]): Promise<RxDocumentDataById<RxDocType>>\n\n    addDoc(docId: string, document: RxDocumentData<RxDocType>): Promise<void>\n    removeDoc(docId: string): Promise<void>\n    removeFromIndex(indexName: string, docId: string): Promise<void>\n    get(key: string): Promise<RxDocumentData<RxDocType> | null>\n    getIndex(key: string): Promise<string[]>\n    updateIndex(indexName: string, docId: string): Promise<void>\n    bulkPut(items: Array<RxDocumentData<RxDocType>>, collectionName: string, schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>): Promise<void>\n}"],"mappings":";AASO,WAAK,aAAL,kBAAKA,gBAAL;AACH,EAAAA,YAAA,aAAU;AACV,EAAAA,YAAA,YAAS;AAFD,SAAAA;AAAA,GAAA;","names":["VISIBILITY"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"25efa73b179eb51379945b8f25047f74d34de95b"},"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/index.ts":{"path":"/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/index.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["/home/runner/work/pluto-encrypted/pluto-encrypted/packages/iagon/src/index.ts"],"sourcesContent":["export * from './IagonStorage/api';\nexport * from './IagonStorage';\nexport * from './IagonStorage/instance';\nexport * from './IagonStorage/internals';\nexport * from './IagonStorage/types';\n"],"mappings":";AAAA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b16d02aaa4f83c11a0d0383f11d92362546f0208"}}